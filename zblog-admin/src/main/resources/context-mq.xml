<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans default-lazy-init="false"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- AMQP线程池 -->
	<task:executor id="amqpConnectionTaskExecutor" pool-size="#{env['mqConnRecvThreads']?:1}"/>
	<!--配置connection-factory，指定连接rabbit server参数 -->
	<rabbit:connection-factory
		id="mqConnectionFactory" channel-cache-size="#{env['mqChannelCacheSize']?:10}" executor="amqpConnectionTaskExecutor"  
		host="#{env['mqHost']}" port="#{env['mqPort']}" username="#{env['mqUser']?:'guest'}" password="#{env['mqPassword']?:'guest'}"
		virtual-host="#{env['mqVHost']?:'/dev'}" />
	
	<!--定义rabbit template用于数据的接收和发送 -->
	<rabbit:template id="mqTemplate" connection-factory="mqConnectionFactory" reply-timeout="30000"
		exchange="zblog.direct.exchange"/>
	
	<!--配置admin信息，管理exchange和queue -->
	<rabbit:admin connection-factory="mqConnectionFactory" />
	
	<!-- 声明队列 -->
	<rabbit:queue name="archiveService.rpc.queue" />
	<rabbit:queue name="articleService.rpc.queue" />
	<rabbit:queue name="categoryService.rpc.queue" />
	<rabbit:queue name="commentService.rpc.queue" />
	<rabbit:queue name="operateHstService.rpc.queue" />
	<rabbit:queue name="resourceService.rpc.queue" />
	<rabbit:queue name="roleService.rpc.queue" />
	<rabbit:queue name="tagService.rpc.queue" />
	<rabbit:queue name="userService.rpc.queue" />
	<rabbit:queue name="visitHstService.rpc.queue" />
	
	
	<!-- 定义exchange，绑定queue和routingKey -->
	<!-- 单个exchange多个队列，通过routingKey区分，需在服务配置 -->
	<rabbit:direct-exchange name="zblog.direct.exchange">
		<rabbit:bindings>
			<rabbit:binding queue="archiveService.rpc.queue" key="archiveService.binding" />
			<rabbit:binding queue="articleService.rpc.queue" key="articleService.binding" />
			<rabbit:binding queue="categoryService.rpc.queue" key="categoryService.binding" />
			<rabbit:binding queue="commentService.rpc.queue" key="commentService.binding" />
			<rabbit:binding queue="operateHstService.rpc.queue" key="operateHstService.binding" />
			<rabbit:binding queue="resourceService.rpc.queue" key="resourceService.binding" />
			<rabbit:binding queue="roleService.rpc.queue" key="roleService.binding" />
			<rabbit:binding queue="tagService.rpc.queue" key="tagService.binding" />
			<rabbit:binding queue="userService.rpc.queue" key="userService.binding" />
			<rabbit:binding queue="visitHstService.rpc.queue" key="visitHstService.binding" />
		</rabbit:bindings>
	</rabbit:direct-exchange>
	
	<!-- 配置RPC服务 -->
	<!-- direct-exchange模式，不同服务配置不同队列和routingKey -->
	<bean id="archiveService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="archiveService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.ArchiveService" />
	</bean>
	<bean id="articleService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="articleService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.ArticleService" />
	</bean>
	<bean id="categoryService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="categoryService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.CategoryService" />
	</bean>
	<bean id="commentService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="commentService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.CommentService" />
	</bean>
	<bean id="operateHstService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="operateHstService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.OperateHstService" />
	</bean>
	<bean id="resourceService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="resourceService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.ResourceService" />
	</bean>
	<bean id="roleService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="roleService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.RoleService" />
	</bean>
	<bean id="tagService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="tagService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.TagService" />
	</bean>
	<bean id="userService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="userService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.UserService" />
	</bean>
	<bean id="visitHstService"
		class="org.springframework.amqp.remoting.client.AmqpProxyFactoryBean">
		<property name="routingKey" value="visitHstService.binding"/>
		<property name="amqpTemplate" ref="mqTemplate" />
		<property name="serviceInterface" value="com.min.zblog.api.rpc.VisitHstService" />
	</bean>
	
	<!-- 心跳处理 -->
	<bean id="heartbeatProcessor" class="com.min.zblog.facility.utils.HeartbeatProcessor"/>
	<task:scheduled-tasks>
		<task:scheduled ref="heartbeatProcessor" method="heartbeat" fixed-delay="#{env['heartbeatInterval']?:1000*60*5}"/>
	</task:scheduled-tasks>
</beans>
